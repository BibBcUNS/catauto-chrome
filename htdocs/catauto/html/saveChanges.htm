<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">

<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<meta http-equiv="Expires" content="-1">
<meta http-equiv="pragma" content="no-cache">
<title>El registro fue modificado</title>
<link rel="stylesheet" type="text/css" href="../css/catalis.css">

<style type="text/css">
	body, table {
		font-family: verdana;
		font-size: 13px;
		background: #CDC7A9;
	}
	body {
		margin: 12px;
	}
	
	.inserted {
		background: #FF9;
	}
	.unchanged {
		background: #FFF;
	}
	.deleted {
		background: #FAA;
	}
	#oldFile, #newFile {
		/*font-family: verdana;*/
		font-size: 13px;
		background: white;
		padding: 6px;
		border: 1px solid #666;
		width: 287px;
		height: 300px;
		overflow: auto;
	}
	table#diff {
		margin-top: 1em;
		border-top: 1px solid #999;
		display: none;
	}
</style>

<script language="JavaScript" type="text/javascript">
// -------------------------------------------------------------------
function heckelDiff(inputO,inputN)
// Heckel's differences algorithm.
// A JavaScript implementation of the code described in:
// 		Heckel, Paul ... Communications ACM, April 1978.
//
// Written by Fernando J. Gómez <fgomez@criba.edu.ar>, november 2003.
//
// This code needs to be improved, especially the final side-by-side
// display of the two compared files, where one would like to see a
// better alignment of the unchanged lines :-\
// -------------------------------------------------------------------
{
	
	// inputO and inputN are the Old and New "files" to be compared;
	// in this case each one is a string with lines delimited by 
	// LINE_SEPARATOR.
	
	var LINE_SEPARATOR = /\r?\n/;
	
	var fileO = inputO.split(LINE_SEPARATOR);
	var fileN = inputN.split(LINE_SEPARATOR);
	
	// Do we really need these marks? (They are used in the example in the original paper)
	fileO = ["BEGIN"].concat(fileO).concat(["END"]);
	fileN = ["BEGIN"].concat(fileN).concat(["END"]);
	
	// The three data structures
	var symbolTable = new Object();
	var OA = new Array();
	var NA = new Array();
	
	
	// Pass 1: store information about the lines of fileN
	for (var i=0; i < fileN.length; i++) {
		if ( "undefined" == typeof( symbolTable[fileN[i]] ) ) {
			symbolTable[fileN[i]] = new Object();
			symbolTable[fileN[i]].NC = 0;
			symbolTable[fileN[i]].OC = 0;
		}
		symbolTable[fileN[i]].NC++;
		NA[i] = symbolTable[fileN[i]];
	}
	
	
	// Pass 2: store information about the lines of fileO
	for (var i=0; i < fileO.length; i++) {
		if ( "undefined" == typeof( symbolTable[fileO[i]] ) ) {
			symbolTable[fileO[i]] = new Object();
			symbolTable[fileO[i]].OC = 0;
			symbolTable[fileO[i]].NC = 0;
		}
		symbolTable[fileO[i]].OC++;
		OA[i] = symbolTable[fileO[i]];
		symbolTable[fileO[i]].OLNO = i;
	}
	
	
	// Pass 3: lines which appear only once in each (and both) files
	for (var i=0; i < fileN.length; i++) {
		if ( NA[i].NC == 1 && NA[i].OC == 1 ) {
			NA[i] = NA[i].OLNO;
			OA[NA[i]] = i;
			//alert(fileN[i]);
		}
	}
	
	
	// Pass 4: process each line in NA in ascending order
	for (var i=0; i < NA.length-1; i++) {	// upper index = NA.length-1
		if ( "object" != typeof(NA[i]) ) {
			var j = NA[i]; 
			if ( NA[i+1] == OA[j+1] ) {		// identical symbol table entry pointers
				OA[j+1] = i+1;
				NA[i+1] = j+1;
			}
		}
	}
	
	
	// Pass 5 process each line in NA in descending order
	for (var i=NA.length-1; i > 0; i--) {	// lower index = 1
		if ( "object" != typeof(NA[i]) ) {
			var j = NA[i];
			if ( NA[i-1] == OA[j-1] ) {		// identical symbol table entry pointers
				NA[i-1] = j-1;
				OA[j-1] = i-1;
			}
		}
	}
	
	
	// Examine new file (expose inserted lines)
	var newFile = "";
	var blockOpen = false;
	for ( var i=1; i < NA.length-1; i++ ) {
		if ( "object" == typeof(NA[i]) ) {
			newFile += "<div class='inserted'>" + fileN[i].replace(/ /g,"&nbsp;") + "</div>";
		} else {
			var j = NA[i];
			if ( OA[j+1] != i+1 ) {
				blockOpen = !blockOpen;
				newFile += "<div class='boundary" + blockOpen + "'>" + fileN[i].replace(/ /g,"&nbsp;") + "</div>";
			} else {
				newFile += "<div class='unchanged'>" + fileN[i].replace(/ /g,"&nbsp;") + "</div>";
			}
		}
	}

	// Examine old file (expose deleted lines)
	// Note the index limits, set to ignore the BEGIN & END marks
	var oldFile = "";
	for ( var i=1; i < OA.length-1; i++ ) {
		if ( "object" == typeof(OA[i]) ) {
			oldFile += "<div class='deleted'>" + fileO[i].replace(/ /g,"&nbsp;") + "</div>";
		}
		else {
			oldFile += "<div class='unchanged'>" + fileO[i].replace(/ /g,"&nbsp;"); + "</div>";
		}
		
	}
	
	/*
	// A ver cómo sale esto...
	var oldFile = "";
	var newFile = "";
	for (var i=0; i < Math.max(fileO.length, fileN.length); i++) {
		if ( NA[i] == OA[i] ) {
			oldFile += "<div class='unchanged'>" + fileO[i] + "</div>";
			newFile += "<div class='unchanged'>" + fileN[i] + "</div>";
		} else {
			// no son iguales; veamos si se trata de 
		if ( "object" == typeof(OA[i]) ) {
			oldFile += "<div class='deleted'>" + fileO[i] + "</div>";
			newFile += "<div>&nbsp;</div>";
		} 
		if ( "object" == typeof(NA[i]) ) {
			oldFile += "<div>&nbsp;</div>";
			newFile += "<div class='inserted'>" + fileN[i] + "</div>";
		}
	}
	*/
	
	// Display results
	document.getElementById("newFile").innerHTML = "<pre>" + newFile + "</pre>";
	document.getElementById("oldFile").innerHTML = "<pre>" + oldFile + "</pre>";
	document.getElementById("diff").style.display = "block";
	
	ajustarVentana();

}

function ajustarVentana(){
	let dialog = window.top.document.getElementsByTagName("dialog")[0];
	dialog.style.height = "500px";
	dialog.style.width = "630px";
	dialog.style.top = "20px";
}

// -----------------------------------------------------------------------------
function handleCancel()
// -----------------------------------------------------------------------------
{
	top.cerrarDialog();
}

// -----------------------------------------------------------------------------
function save()
// -----------------------------------------------------------------------------
{
	window.returnValue = "save";	
	top.cerrarDialog();
}

// -----------------------------------------------------------------------------
function doNotSave()
// -----------------------------------------------------------------------------
{
	window.returnValue = "doNotSave";
	top.cerrarDialog();
}

// -----------------------------------------------------------------------------
function showChanges()
// -----------------------------------------------------------------------------
{
	var callerWindowObject = dialogArguments;
	var oldRecord = callerWindowObject.originalRecord;
	var newRecord = callerWindowObject.serializeRecord(true,true,true,true);
	heckelDiff(oldRecord,newRecord);
	window.dialogHeight = "460px";
}


// -----------------------------------------------------------------------------
function init()
// -----------------------------------------------------------------------------
{
	window.returnValue = "cancel";
	
	document.getElementById("oldFile").onscroll = function() {
		document.getElementById("newFile").scrollLeft = this.scrollLeft;
		document.getElementById("newFile").scrollTop = this.scrollTop;
	}
	
	document.getElementById("newFile").onscroll = function() {
		document.getElementById("oldFile").scrollLeft = this.scrollLeft;
		document.getElementById("oldFile").scrollTop = this.scrollTop;
	}
	
	document.onkeydown = function(evt) {
		var evt = (evt) ? evt : window.event;
		if ( evt.keyCode == 27 ) {
			handleCancel();
		} 
	}
	
	document.getElementById("btnShowChanges").onclick = showChanges;
	document.getElementById("btnDoNotSave").onclick = doNotSave;
	document.getElementById("btnCancel").onclick = handleCancel;
	
	window.focus();
}

window.onload = init;
</script>
</head>

<body>

<div style="text-align: center; margin-bottom: 20px;">
	<b>El registro que estaba editando ha sido modificado.</b>
</div>

<div align="center" style="margin-top: 10px;">
	<!--button class="marcEditButton" onclick="save()">&nbsp;Grabar&nbsp;</button>
	&nbsp;&nbsp;&nbsp;&nbsp;-->
	<button id="btnShowChanges" class="marcEditButton">Ver los cambios</button>
	&nbsp;&nbsp;&nbsp;&nbsp;
	<button id="btnDoNotSave" class="marcEditButton">Continuar (no graba)</button>
	&nbsp;&nbsp;&nbsp;&nbsp;
	<button id="btnCancel" class="marcEditButton">Cancelar</button>

	<table id="diff" width="100%" cellpadding="2" cellspacing="0" border="0">
		<tr>
			<td style="background: white;"><span class="deleted" style="font-weight: bold;">&nbsp;Campos eliminados o modificados&nbsp;</span></td>
			<td style="background: white;"><span class="inserted" style="font-weight: bold;">&nbsp;Campos agregados o modificados&nbsp;</span></td>
		</tr>
		<tr>
			<td width="50%" valign="top">
				<div id="oldFile"></div>
			</td>
			<td valign="top">
				<div id="newFile"></div>
			</td>
		</tr>
	</table>
</div>

</body>
</html>
